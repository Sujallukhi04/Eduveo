generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String             @unique
  password         String
  avatarUrl         String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdGroups     Group[]            @relation("GroupCreator")
  memberOfGroups    Group[]            @relation("GroupMembers", fields: [groupIds], references: [id])
  groupIds          String[]           @db.ObjectId
  joinRequests      JoinRequest[]      @relation("UserJoinRequests")
  messages          Message[]
  files             File[]
  pushSubscriptions PushSubscription[]
  sessions          Session[]
  boards            Board[]
  userFavorite      UserFavorite[]
}

model Group {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  subject      String
  description  String?
  code         String        @unique
  creatorId    String        @db.ObjectId
  creator      User          @relation("GroupCreator", fields: [creatorId], references: [id])
  members      User[]        @relation("GroupMembers", fields: [memberIds], references: [id])
  memberIds    String[]      @db.ObjectId
  joinRequests JoinRequest[] @relation("GroupJoinRequests")
  messages     Message[]
  files        File[]
  sessions     Session[]
  boards       Board[]
  userFavorite UserFavorite[]
  createdAt    DateTime      @default(now())
}

model JoinRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  groupId   String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation("UserJoinRequests", fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation("GroupJoinRequests", fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  groupId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, createdAt])
}

model File {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  fileType     String
  size         Int
  userId       String   @db.ObjectId
  groupId      String   @db.ObjectId
  caption      String?
  previewUrl   String?
  thumbnailUrl String?
  metadata     Json?    
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group        Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([groupId, createdAt])
}

model Session {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  time          DateTime
  prerequisites String?
  isStarted     Boolean   @default(false)
  startedAt     DateTime?
  endedAt       DateTime?
  groupId       String    @db.ObjectId
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  creatorID     String    @db.ObjectId
  creator       User      @relation(fields: [creatorID], references: [id])
  createdAt     DateTime  @default(now())
  // boardId       String    @db.ObjectId @unique
  // board         Board     @relation(fields: [boardId],references: [id] ,onDelete: Cascade)
}
model PushSubscription {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  endpoint String @unique
  auth     String
  p256dh   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Board {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  groupId    String        @db.ObjectId
  group      Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  authorId   String        @db.ObjectId
  author     User          @relation(fields: [authorId], references: [id])
  authorName String
  imageUrl   String
  favorites  UserFavorite[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
 // session    Session?      
  @@index([groupId])
  @@index([title])
}

model UserFavorite {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  groupId String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId, groupId])
  @@index([userId, groupId])
  @@index([boardId])
}

