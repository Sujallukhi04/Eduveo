// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String         @unique
  password       String
  avatarUrl      String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  createdGroups  Group[]        @relation("GroupCreator")
  memberOfGroups Group[]        @relation("GroupMembers", fields: [groupIds], references: [id])
  groupIds       String[]       @db.ObjectId
  joinRequests   JoinRequest[]  @relation("UserJoinRequests")
  messages       Message[]
  files          File[]
  boards         Board[]
  userFavorite   UserFavorite[]
}

model Group {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  subject      String
  description  String?
  code         String         @unique
  creatorId    String         @db.ObjectId
  creator      User           @relation("GroupCreator", fields: [creatorId], references: [id])
  members      User[]         @relation("GroupMembers", fields: [memberIds], references: [id])
  memberIds    String[]       @db.ObjectId
  joinRequests JoinRequest[]  @relation("GroupJoinRequests")
  createdAt    DateTime       @default(now())
  messages     Message[]
  files        File[]
  boards       Board[]
  userFavorite UserFavorite[]
  pinnedMessageId String?
}

model JoinRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  groupId   String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation("UserJoinRequests", fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation("GroupJoinRequests", fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  userId    String   @db.ObjectId
  groupId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId, createdAt])
}

model File {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  url          String
  fileType     String
  size         Int
  userId       String   @db.ObjectId
  groupId      String   @db.ObjectId
  caption      String?
  previewUrl   String?
  thumbnailUrl String?
  metadata     Json?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group        Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())

  @@index([groupId, createdAt])
}

model Board {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  groupId    String         @db.ObjectId
  group      Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  authorId   String         @db.ObjectId
  author     User           @relation(fields: [authorId], references: [id])
  authorName String
  imageUrl   String
  favorites  UserFavorite[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // session    Session?      
  @@index([groupId])
  @@index([title])
}

model UserFavorite {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  groupId String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, boardId, groupId])
  @@index([userId, groupId])
  @@index([boardId])
}
